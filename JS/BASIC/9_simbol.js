



// Тип данных «Символ» представляет собой уникальный идентификатор.
// По спецификации, в качестве ключей для свойств объекта могут использоваться только строки или символы.
let id = Symbol("id");
// Символы гарантированно уникальны. Даже если мы создадим множество символов
// с одинаковым описанием, это всё равно будут разные символы. Описание – это просто метка, которая ни на что не влияет.
let id1 = Symbol("id");
let id2 = Symbol("id");
alert(id1 == id2); // false

// Если мы хотим использовать символ при литеральном объявлении объекта {...}, его необходимо заключить в квадратные скобки.
let id = Symbol("id");
let user = {
    name: "Вася",
    [id]: 123 // просто "id: 123" не сработает
};
// Это вызвано тем, что нам нужно использовать значение переменной id в качестве ключа, а не строку «id».
// Символы игнорируются циклом for…in
// Это – часть общего принципа «сокрытия символьных свойств». Если другая библиотека или скрипт будут
// работать с нашим объектом, то при переборе они не получат ненароком наше символьное свойство.
// Object.keys(user) также игнорирует символы.


// Глобальные символы
// читаем символ из глобального реестра и записываем его в переменную
let id = Symbol.for("id"); // если символа не существует, он будет создан
// читаем его снова и записываем в другую переменную (возможно, из другого места кода)
let idAgain = Symbol.for("id");
// проверяем -- это один и тот же символ
alert(id === idAgain); // true
// получаем имя по символу
alert(Symbol.keyFor(sym)); // name
alert(Symbol.keyFor(sym2)); // id









