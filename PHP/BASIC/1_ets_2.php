
Ключевое слово final, которое указали перед определением метода или константы,
не даёт дочерним классам переопределять этот метод или константу.
Ключевое слово не даст расширить класс, если класс определили окончательным.


<?php

//final public function moreTesting()


try {
echo inverse(5) . "\n";
} catch (Exception $e) {
echo 'PHP перехватил исключение: ',  $e->getMessage(), "\n";
} finally {
echo "Первый блок finally.\n";
}

?>
Файберы представляют собой прерываемые функции полного цикла.
Файберы могут быть приостановлены из любого места цикла, приостанавливая выполнение в
файбере до тех пор, пока файбер не будет возобновлён в будущем.
<?php
$fiber = new Fiber(function (): void {
    $value = Fiber::suspend('fiber');
    echo "Значение возобновлённого файбера: ", $value, PHP_EOL;
});

$value = $fiber->start();

echo "Значение приостановленного файбера: ", $value, PHP_EOL;

$fiber->resume('test');
?>

Генератор в целом выглядит как обычная функция, за исключением того, что вместо возвращения одного значения,
генератор будет перебирать столько значений, сколько необходимо. Любая функция, содержащая yield, является функцией генератора.
<?php
function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        // Обратите внимание, что $i сохраняет своё значение между вызовами.
        yield $i;
    }
}

$generator = gen_one_to_three();
foreach ($generator as $value) {
    echo "$value\n";
}
?>
