/*


CSS is the language we use to style an HTML document.
CSS describes how HTML elements should be displayed.
CSS stands for Cascading Style Sheets

<link rel="stylesheet" href="mystyle.css">
<p style="color:red;">This is a paragraph.</p>

Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.
This does not happen on left and right margins! Only top and bottom margins!
Demonstration of margin collapse:
h1 {
  margin: 0 0 50px 0;
}
h2 {
  margin: 20px 0 0 0;
}

auto - This is default. The browser calculates the height and width
length - Defines the height/width in px, cm, etc.
% - Defines the height/width in percent of the containing block
initial - Sets the height/width to its default value
inherit - The height/width will be inherited from its parent value


*/
p.center {
}

h1, h2, p {
}

* {
    box-sizing: border-box;
}

body {
    background-image: url("paper.gif");
    background-color: lightblue;
    background-repeat: no-repeat;
    background-position: right top;
    background-attachment: fixed;

    border: 5px solid red;
    border-radius: 5px;

    margin: 25px 50px 75px 100px; /*to ri bo li*/
    color: white;
    opacity: 0.3;

    text-align: center;
    text-align: justify;

    vertical-align: baseline; /*Set the vertical alignment of an image in a text:*/
    text-decoration: underline red double;
    text-decoration: none;
    text-transform: uppercase;
    text-indent: 50px; /*red line*/
    letter-spacing: 5px;

    line-height: 0.8;
    word-spacing: 10px;
    white-space: nowrap;
    text-shadow: 2px 2px 5px red;

    /*The font-family property should hold several font names as a "fallback" system, to ensure maximum compatibility between browsers/operating systems*/
    font-family: "Times New Roman", Times, serif; /*Start with the font you want*/
    font-family: verdana;
    font-style: italic;
    font-weight: bold;
    font-size: 20px;
    font-size: 2.5em; /* 40px/16=2.5em The default text size in browsers is 16px*/

    /*vw unit, which means the "viewport width".*/

    /*<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">*/

    /*
    a:link - a normal, unvisited link
    a:visited - a link the user has visited
    a:hover - a link when the user mouses over it
    a:active - a link the moment it is clicked
    */

    list-style-type: circle;
    list-style-position: outside;


    border-collapse: collapse; /*Table*/
    vertical-align: bottom;
    z-index: -1;

    overflow: scroll;
    clear: both; /* When we use the float property, and we want the next element below (not on right or left), we will have to use the clear property.*/
}

/*.clearfix::after {*/
/*    content: "";*/
/*    clear: both;*/
/*    display: table;*/
/*}*/


/*
child selector (>) являющие прямыми потомками для элементов отобранных первым селектором
adjacent sibling selector (+) directly after another specific element.
general sibling selector (~)  следуют после, а не внутри
*/
div > p {
    background-color: yellow;
}

div + p {
    background-color: yellow;
}

div ~ p {
    background-color: yellow;
}




/*Pseudo-classes*/
div:hover p {
    display: block;
}
p:first-child {
    color: blue;
}
/*Match the first <i> element in all <p> elements*/
p i:first-child {
    color: blue;
}
tr:nth-child(even) {
    background-color: #f2f2f2;
}
/*
:not(selector)	:not(p)	Selects every element that is not a <p> element
:nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
*/


/*350px*/
div {
    width: 300px;
    padding: 25px;
}

/*300px*/
div {
    width: 300px;
    padding: 25px;
    box-sizing: border-box;
}


/*
A block-level element ALWAYS starts on a new line
and takes up the full width available (stretches out to the left and right as far as it can).
The <div> element is a block-level element.
<div><h1> - <h6><p><form><header><footer><section>

An inline element DOES NOT start on a new line and only takes up as much width as necessary.
<span><a><img>



Static positioned elements are not affected by the top, bottom, left, and right properties.
Relative; is positioned relative to its normal position.
Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position.
 left: 30px;

An element with position: fixed; is positioned relative
to the viewport, which means it always stays in the same place
even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
position: fixed;
bottom: 0;
right: 0;

An element with position: absolute; is positioned relative to the nearest positioned ancestor
(instead of positioned relative to the viewport, like fixed).
position: absolute;


position: sticky;
An element with position: sticky; is positioned based on the user's scroll position.
A sticky element toggles between relative and fixed, depending on the scroll position.
It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).



flex make block fit  vertically in catalog +++
*/


/*add font code ?*/


.center p {
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


/*Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
The following example shows the different behavior of display: inline, display: inline-block and display: block:*/

span.a {
    display: inline; /* the default for span */
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}

span.b {
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}

span.c {
    display: block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}


/*Using Flexbox*/
.center {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    border: 3px solid green;
}

/*<div class="center">
  <p>I am vertically and horizontally centered.</p>
</div>*/











