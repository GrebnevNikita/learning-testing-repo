/*
<meta name="viewport" content="width=device-width, initial-scale=1.0">

The viewport is the user's visible area of a web page.

CSS is the language we use to style an HTML document.
CSS describes how HTML elements should be displayed.
CSS stands for Cascading Style Sheets

<link rel="stylesheet" href="mystyle.css">
<p style="color:red;">This is a paragraph.</p>


Margin Collapse
Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.
This does not happen on left and right margins! Only top and bottom margins!
Demonstration of margin collapse:
h1 {
  margin: 0 0 50px 0;
}
h2 {
  margin: 20px 0 0 0;
}

auto - This is default. The browser calculates the height and width
length - Defines the height/width in px, cm, etc.
% - Defines the height/width in percent of the containing block
initial - Sets the height/width to its default value
inherit - The height/width will be inherited from its parent value


*/
p.center {
}

h1, h2, p {
}

* {
    box-sizing: border-box;
}

body {
    background-image: url("paper.gif");
    background-color: lightblue;
    background-repeat: no-repeat;
    background-position: right top;
    background-attachment: fixed;

    border: 5px solid red;
    border-radius: 5px;

    margin: 25px 50px 75px 100px; /*to ri bo li*/
    color: white;
    opacity: 0.3;

    text-align: center;
    text-align: justify;

    vertical-align: baseline; /*Set the vertical alignment of an image in a text:*/
    text-decoration: underline red double;
    text-decoration: none;
    text-transform: uppercase;
    text-indent: 50px; /*red line*/
    letter-spacing: 5px;

    line-height: 0.8;
    word-spacing: 10px;
    white-space: nowrap;
    text-shadow: 2px 2px 5px red;

    /*The font-family property should hold several font names as a "fallback" system, to ensure maximum compatibility between browsers/operating systems*/
    font-family: "Times New Roman", Times, serif; /*Start with the font you want*/
    font-family: verdana;
    font-style: italic;
    font-weight: bold;
    font-size: 20px;
    font-size: 2.5em; /* 40px/16=2.5em The default text size in browsers is 16px*/

    /*vw unit, which means the "viewport width".*/

    /*<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">*/

    /*
    a:link - a normal, unvisited link
    a:visited - a link the user has visited
    a:hover - a link when the user mouses over it
    a:active - a link the moment it is clicked
    */

    list-style-type: circle;
    list-style-position: outside;


    border-collapse: collapse; /*Table*/
    vertical-align: bottom;
    z-index: -1;

    overflow: scroll;
    clear: both; /* When we use the float property, and we want the next element below (not on right or left), we will have to use the clear property.*/


    opacity: 0.5;
    border-radius: 15px 50px 30px 5px;


    border: 10px solid transparent;
    padding: 15px;
    border-image: url(border.png) 30 stretch;


    background-image: url(img_flwr.gif), url(paper.gif);
    background-position: right bottom, left top;
    background-repeat: no-repeat, repeat;

    background-image: linear-gradient(red, yellow);
    background-image: linear-gradient(to right, red , yellow);
    background-image: linear-gradient(to bottom right, red, yellow);
    background-image: linear-gradient(180deg, red, yellow);
    background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet);
    background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
    background-image: repeating-linear-gradient(red, yellow 10%, green 20%);

    background-image: radial-gradient(red 5%, yellow 15%, green 60%);
    background-image: radial-gradient(closest-side at 60% 55%, red, yellow, black);
    background-image: radial-gradient(farthest-side at 60% 55%, red, yellow, black);


    text-shadow: 2px 2px 4px #000000;
    box-shadow: 10px 10px 5px 12px lightblue;

    text-overflow: clip;
    word-wrap: break-word;
    word-break: break-all;
    writing-mode: vertical-rl;


    cursor: not-allowed;

    column-count: 3;


    resize: horizontal;  /*The resize property specifies if (and how) an element should be resizable by the user.*/
    overflow: auto;












    /*transform*/
/*
rotate()
scaleX()
scaleY()
scale()
skewX()
skewY()
skew()
matrix()
*/


    transition-property: width;
    transition-duration: 2s;
    transition-timing-function: linear;
    transition-delay: 1s;


/*
#div1 {transition-timing-function: linear;}
#div2 {transition-timing-function: ease;}
#div3 {transition-timing-function: ease-in;}
#div4 {transition-timing-function: ease-out;}
#div5 {transition-timing-function: ease-in-out;}
*/


/*img {*/
/*    width: 200px;*/
/*    height: 300px;*/
/*    object-fit: cover;*/
/*    object-position: 15% 100%;*/
/*}*/
/*
fill - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit
contain - The image keeps its aspect ratio, but is resized to fit within the given dimension
cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
none - The image is not resized
scale-down - the image is scaled down to the smallest version of none or contain
*/

}




/*CSS Variables - The var() Function*/
/*
To create a variable with global scope, declare it inside the :root selector. The :root selector matches the document's root element.
To create a variable with local scope, declare it inside the selector that is going to use it.*/

:root {
    --blue: #1e90ff;
    --white: #ffffff;
}
body { background-color: var(--blue); }
h2 { border-bottom: 2px solid var(--blue); }
.container {
    color: var(--blue);
    --blue: #0000ff; /* local variable will override global */
    --button-blue: #0000ff; /* new local variable */
    background-color: var(--white);
    padding: 15px;
}



/*CSS Media Queries*/
@media screen and (min-width: 450px) {
    .container {
        --fontsize: 50px;
    }
}
/*
<link rel="stylesheet" media="print" href="print.css">
<link rel="stylesheet" media="screen" href="screen.css">
<link rel="stylesheet" media="screen and (min-width: 480px)" href="example1.css">
<link rel="stylesheet" media="screen and (min-width: 701px) and (max-width: 900px)" href="example2.css">
*/
/*
not: This keyword inverts the meaning of an entire media query.
only: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.
and: This keyword combines a media type and one or more media features.
*/

@media screen and (min-width: 480px) {
    #leftsidebar {width: 200px; float: left;}
    #main {margin-left: 216px;}
}




.flex-container {
    display: flex;
    flex-direction: column;
    flex-direction: row;
    flex-wrap: wrap;
    flex-wrap: nowrap;
    flex-flow: row wrap;/*The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.*/

    justify-content: center;     /* rows horizontal  center*/
    justify-content: flex-start;  /* rows horizontal  start*/
    justify-content: flex-end;
    justify-content: space-around;
    justify-content: space-between;

    align-items: center;    /*inside row vertical  center*/
    align-items: stretch;
    align-items: baseline;

    align-content: space-between;   /* rows vertical  */
    align-content: flex-end; /* rows vertical  enf of container*/

    flex-grow: 1;
    flex-grow: 8;
    flex-shrink: 0;
    flex-basis: 200px; /*Set the initial length of the third flex item to 200 pixels:*/
    align-self: center; /*    The align-self property overrides the align-items property of the container.*/



/*    Perfect Centering*/
    display: flex;
    height: 300px;
    justify-content: center;
    align-items: center;


    display: flex;

    margin: auto;


}






/*
<div class="pagination">
  <a href="#">&laquo;</a>
  <a href="#">1</a>
  <a href="#">2</a>
  <a href="#">3</a>
  <a href="#">4</a>
  <a href="#">5</a>
  <a href="#">6</a>
  <a href="#">&raquo;</a>
</div>
*/



/* The animation code */
@keyframes example {
    0%   {background-color:red; left:0px; top:0px;}
    25%  {background-color:yellow; left:200px; top:0px;}
    50%  {background-color:blue; left:200px; top:200px;}
    75%  {background-color:green; left:0px; top:200px;}
    100% {background-color:red; left:0px; top:0px;}
}

/* The element to apply the animation to */
div {
    width: 100px;
    height: 100px;
    position: relative;
    background-color: red;
    animation-name: example;
    animation-duration: 4s;
}





.mask1 {
    -webkit-mask-image: url(w3logo.png);
    mask-image: url(w3logo.png);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
}
/*
<svg width="600" height="400">
  <mask id="svgmask1">
    <polygon fill="#ffffff" points="200 0, 400 400, 0 400"></polygon>
  </mask>
  <image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="img_5terre.jpg" mask="url(#svgmask1)"></image>
</svg>
*/


/*.clearfix::after {*/
/*    content: "";*/
/*    clear: both;*/
/*    display: table;*/
/*}*/




/*
child selector (>) являющие прямыми потомками для элементов отобранных первым селектором
adjacent sibling selector (+) directly after another specific element.
general sibling selector (~)  следуют после, а не внутри
*/
div > p {
    background-color: yellow;
}

div + p {
    background-color: yellow;
}

div ~ p {
    background-color: yellow;
}


/*Pseudo-classes*/
div:hover p {
    display: block;
}

p:first-child {
    color: blue;
}

/*Match the first <i> element in all <p> elements*/
p i:first-child {
    color: blue;
}

tr:nth-child(even) {
    background-color: #f2f2f2;
}

/*
:not(selector)	:not(p)	Selects every element that is not a <p> element
:nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
*/


/*Pseudo-element*/
p::first-line {
    color: #ff0000;
    font-variant: small-caps;
}

p::first-letter {
    color: #ff0000;
    font-size: xx-large;
}

h1::before {
    content: url(smiley.gif);
}

h1::after {
    content: url(smiley.gif);
}

::marker {
    color: red;
    font-size: 23px;
}

::selection {
    color: red;
    background: yellow;
}


/*CSS Attribute Selectors*/
a[target="_blank"] {
    background-color: yellow;
}

[title~="flower"] {
    border: 5px solid yellow;
}

/*The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text".*/
[class|="top"] {
    background: yellow;
}

/*The [attribute^="value"] selector is used to select elements with the specified attribute, whose value starts with the specified value.*/
[class^="top"] {
    background: yellow;
}

/*The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value.*/
[class$="test"] {
    background: yellow;
}

/*The following example selects all elements with a class attribute value that contains "te":*/
/*Note: The value does not have to be a whole word!*/
[class*="te"] {
    background: yellow;
}
input[type="text"] {
    width: 150px;
    display: block;
    margin-bottom: 10px;
    background-color: yellow;
}
input[type=text]:focus {
    background-color: lightblue;
}



/*counter-reset*/
ol {
    counter-reset: section;
    list-style-type: none;
}

li::before {
    counter-increment: section;
    content: counters(section,".") " ";
}




/* Create three equal columns that float next to each other */
.column {
    float: left;
    width: 33.33%;
}

/* Clear floats after the columns */
.row:after {
    content: "";
    display: table;
    clear: both;
}

/* Responsive layout - makes the three columns stack on top of each other instead of next to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 600px) {
    .column {
        width: 100%;
    }
}




/*In fact, if you use the !important rule, it will override ALL previous styling rules for that specific property on that element!*/
p {
    background-color: red !important;
}

/*CSS Math Functions*/
#div1 {
    width: calc(100% - 100px);
    width: max(50%, 300px);
    width: min(50%, 300px);

    
}
















/*350px*/
div {
    width: 300px;
    padding: 25px;
}

/*300px*/
div {
    width: 300px;
    padding: 25px;
    box-sizing: border-box;
}


/*
A block-level element ALWAYS starts on a new line
and takes up the full width available (stretches out to the left and right as far as it can).
The <div> element is a block-level element.
<div><h1> - <h6><p><form><header><footer><section>

An inline element DOES NOT start on a new line and only takes up as much width as necessary.
<span><a><img>



Static positioned elements are not affected by the top, bottom, left, and right properties.
Relative; is positioned relative to its normal position.
Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position.
 left: 30px;

An element with position: fixed; is positioned relative
to the viewport, which means it always stays in the same place
even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
position: fixed;
bottom: 0;
right: 0;

An element with position: absolute; is positioned relative to the nearest positioned ancestor
(instead of positioned relative to the viewport, like fixed).
position: absolute;


position: sticky;
An element with position: sticky; is positioned based on the user's scroll position.
A sticky element toggles between relative and fixed, depending on the scroll position.
It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).



flex make block fit  vertically in catalog +++
*/

/*Different Font Formats
TrueType Fonts (TTF)
TrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft Windows operating systems.
OpenType Fonts (OTF)
OpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. OpenType fonts are used commonly today on the major computer platforms.
The Web Open Font Format (WOFF)
WOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF is essentially OpenType or TrueType with compression and additional metadata. The goal is to support font distribution from a server to a client over a network with bandwidth constraints.
The Web Open Font Format (WOFF 2.0)
TrueType/OpenType font that provides better compression than WOFF 1.0.
SVG Fonts/Shapes
SVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 specification define a font module that allows the creation of fonts within an SVG document. You can also apply CSS to SVG documents, and the @font-face rule can be applied to text in SVG documents.
Embedded OpenType Fonts (EOT)
EOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages.*/
@font-face {
    font-family: myFirstFont;
    src: url(sansation_light.woff);
}

div {
    font-family: myFirstFont;
}





.center p {
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


/*Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
The following example shows the different behavior of display: inline, display: inline-block and display: block:*/

span.a {
    display: inline; /* the default for span */
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}

span.b {
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}

span.c {
    display: block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;
    background-color: yellow;
}


/*Using Flexbox*/
.center {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    border: 3px solid green;
}

/*<div class="center">
  <p>I am vertically and horizontally centered.</p>
</div>*/











